
```python
# interfaces/voice_interface.py
# ูุงุฌูุฉ ุงูุฃูุงูุฑ ุงูุตูุชูุฉ ุจุงูุนุฑุจูุฉ
# ูุคุณุณุฉ ุฒุงู ุฃููููุง ููุชูููููุฌูุง - [ุงุณูู]ุ 2025

import speech_recognition as sr
from gtts import gTTS
import os
from datetime import datetime


class VoiceInterface:
    """
    ูุงุฌูุฉ ุตูุชูุฉ ุซูุงุฆูุฉ ุงููุบุฉ (ุนุฑุจู/ุฅูุฌููุฒู)
    ุชูุจู ุฃูุงูุฑ ูุซู: "ุฒุงูุ ุฃุธูุฑ ุชูุงุฑูุฑ ุงูููู"ุ "ุฒุงูุ ุฃููู ุฌููุน ุงูููุธููู"
    """

    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        self.activation_word = "ุฒุงู"
        print("๐ข ุชู ุชุดุบูู ูุงุฌูุฉ ุงูุฃูุงูุฑ ุงูุตูุชูุฉ")

    def listen_for_command(self) -> str:
        """ุงุณุชูุน ุฅูู ุงููููุฑูููู ูุงุนุฑุถ ุงููุต ุงูููุทูู"""
        with self.microphone as source:
            print("๐ฃ๏ธ ูุณุชูุน...")
            self.recognizer.adjust_for_ambient_noise(source)
            audio = self.recognizer.listen(source)

        try:
            text = self.recognizer.recognize_google(audio, language="ar-SA")
            print(f"ุชู ุงูุชุนุฑู: {text}")
            return text.lower()
        except sr.UnknownValueError:
            self.speak("ูู ุฃููู ุฐูู.")
            return ""
        except sr.RequestError:
            self.speak("ุนุฐุฑูุงุ ููุงู ูุดููุฉ ูู ุงูุงุชุตุงู.")
            return ""

    def speak(self, text: str):
        """ูุทู ุงููุต ุจุตูุช ูุงุถุญ"""
        tts = gTTS(text=text, lang='ar', slow=False)
        filename = "response.mp3"
        tts.save(filename)
        os.system(f"mpg321 {filename} > /dev/null 2>&1")  # Linux
        # os.system(f"start {filename}")  # Windows
        os.remove(filename)

    def process_voice_command(self, command: str) -> bool:
        """ูุนุงูุฌุฉ ุงูุฃูุฑ ุงูุตูุชู"""
        if self.activation_word not in command:
            return False

        if "ุชูุงุฑูุฑ ุงูููู" in command or "ุชูุฑูุฑ ุงูููู" in command:
            self.speak("ุฌุงุฑู ุฌูุจ ุชูุฑูุฑ ุงูููู...")
            # ููุง ูููู ุงุณุชุฏุนุงุก ูุงุฌูุฉ ุจุฑูุฌุฉ ุงูุชุทุจููุงุช
            self.speak("ุชู ุนุฑุถ ุงูุชูุฑูุฑ ุนูู ุงูุดุงุดุฉ.")
            return True

        elif "ุฃููู ุฌููุน ุงูููุธููู" in command:
            # ุชูุฑูุฑ ุงูุฃูุฑ ุฅูู ุงูููุงุฉ ุงูุฐููุฉ
            from core.decision_trigger import UCCPProcessor
            uccp = UCCPProcessor()
            command_obj = {
                "raw": command,
                "action": "stop",
                "target": "all employees"
            }
            response = uccp.execute(command_obj)
            self.speak(response["explanation"])
            return True

        elif "ุนุฑุถ ุงูุฅุญุตุงุฆูุงุช" in command:
            self.speak("ุฌุงุฑู ุนุฑุถ ุงูุฅุญุตุงุฆูุงุช ุนูู ุงูุดุงุดุฉ.")
            return True

        else:
            self.speak("ูุง ุฃุณุชุทูุน ุชูููุฐ ูุฐุง ุงูุฃูุฑ ุญุงูููุง.")
            return False
```