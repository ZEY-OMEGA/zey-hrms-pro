from typing import Dict, Any
import time


class DecisionTriggerProtocol:
    """
    بروتوكول إطلاق القرار الذكي
    يراقب مؤشرات النظام ويُفعّل دورة التنفيذ عند فقدان التماسك ووجود هدف.
    """

    def __init__(self, ats_core):
        self.ats = ats_core  # الربط بالنواة التنفيذية
        self.v_threshold = 0.7  # عتبة الاستقرار (إذا انخفض عن هذا المستوى، يُعتبر النظام غير مستقر)
        self.check_interval = 0.5  # فحص كل 0.5 ثانية (للتشغيل في الزمن الحقيقي)
        self.is_monitoring = False
        print("🟢 تم تشغيل Decision Trigger Protocol بنجاح")
        print(f"   عتبة الاستقرار (v): {self.v_threshold}")

    def is_stable(self) -> bool:
        """
        التحقق مما إذا كان النظام متماسكًا داخليًا
        """
        return self.ats.v >= self.v_threshold

    def has_goal(self) -> bool:
        """
        التحقق مما إذا كان هناك هدف حالي
        """
        return self.ats.g is not None and self.ats.g.strip() != ""

    def should_activate(self) -> bool:
        """
        تحديد ما إذا كان يجب تفعيل دورة التنفيذ
        """
        return not self.is_stable() and self.has_goal()

    def activate_cycle(self):
        """
        بدء دورة التنفيذ عبر ATSCorePro
        """
        if self.should_activate():
            print(f"⚡ نقطة القرار: تم اكتشاف فقدان التماسك (v={self.ats.v:.3f}) وهدف موجود ('{self.ats.g}')")
            print("🔄 بدء دورة التنفيذ...")
            # نظام ATSCorePro يدير الدورة تلقائيًا عند update()
            self.ats.update({}, new_goal=self.ats.g)  # إعادة التحديث لبدء التوسع
            return True
        return False

    def start_monitoring(self):
        """
        بدء المراقبة المستمرة للنظام
        """
        self.is_monitoring = True
        print("🔍 بدء المراقبة المستمرة لنقطة القرار...")

        while self.is_monitoring:
            triggered = self.activate_cycle()
            if triggered:
                # بعد التفعيل، يمكن إيقاف المراقبة المؤقتة أو الاستمرار حسب الحاجة
                pass
            time.sleep(self.check_interval)

    def stop_monitoring(self):
        """
        إيقاف المراقبة
        """
        self.is_monitoring = False
        print("🛑 تم إيقاف مراقبة نقطة القرار.")

    def manual_check(self) -> Dict[str, Any]:
        """
        فحص يدوي للحالة (مفيد للواجهات أو الاختبارات)
        """
        stable = self.is_stable()
        goal = self.has_goal()
        trigger = self.should_activate()

        return {
            "current_v": round(self.ats.v, 3),
            "threshold_v": self.v_threshold,
            "is_stable": stable,
            "has_goal": goal,
            "should_activate": trigger,
            "status_message": f"System {'Stable' if stable else 'Unstable'} | Goal {'Present' if goal else 'Absent'}"
        }